Angular Directives:
=============
1.Attribute Directive
2.Structural Directive

Q:	 why do we need Angular Directives		????

A:	if you want a similar functionality in all the components for an example 
	fade-in and fade-out functionality, you can take two approaches. 
	The common approach would be, 
		1.you can explicitly write the code in all the components for the required behavior,
		but it would be tedious and complex.
		2.Alternatively, like a function in a programming language, you can write the code 
		and later you can call it anytime whenever you want that behavior of that function. 

Similarly, you can create a directive and write the behavior inside it. 
Then, wherever you need that behavior, you can import the directive.

Angular Directive is basically a class with a @Directive decorator. 

Decorators? :
----------------
Decorators are functions that modify JavaScript classes. 
Decorators are used for attaching metadata to classes, it knows the configuration of those classes 
and how they should work.

You would be surprised to know that a component is also a directive-with-a-template. 
A @Component decorator is actually a @Directive decorator extended with template-oriented features. 
Whenever Angular renders a directive, it changes the DOM according to the instructions given by the directive. 
Directive appears within an element tag similar to attributes.

The Angular Directive can be classified into two types: 
	1.structural directives.
	2.attribute directives.

1.Structural directives:
===============
	Structural directives are responsible for shape or reshape the DOM’s structure, 
	typically by adding, removing, or manipulating elements. 
	An asterisk (*) precedes the directive attribute name. 
	It does not require brackets or parentheses like attribute directive.
Ex:
	*ngFor 
	*ngIf 

2.Attribute directives:
===============
	Basically used to modify or alter the appearance and behavior of an element.
	The selector is the property that identifies the attribute. 
	It is used as HTML tag to target & insert an instance of the directive class where it finds that tag. 
	The directive class implements the desired directive behavior.
	When you include attribute directives in templates, they look like regular HTML attributes.
Ex:
	ngModel
	ngSwitch	
	ngStyle
	ngClass




Source:	https://www.edureka.co/blog/angular-directive/





